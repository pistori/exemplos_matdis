# -*- coding: utf-8 -*-
"""Tabela_Verdade.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1daWYPYR2ba-9aSwSQQF2boU98zqSPgf_

# Exemplo inicial de como calcular e mostrar tabelas verdade

## Autor: Hemerson Pistori (pistori@ucdb.br)

Neste exemplo, bastante limitado, eu calculo uma tabela verdade com duas variáveis e alguns operadores lógicos. Estou usando a biblioteca pandas para trabalhar com tabelas.
"""

import pandas as pd  # Importando a biblioteca pandas

# Criando primeiro uma matriz com todos os valores possívels para duas variáveis
valores = [[False, False],
           [False,True], 
           [True,False], 
           [True,True]]

# Criando o 'panda dataframe' que é uma estrutura de dados específica que
# o pacote 'pandas' usa.           
tabela = pd.DataFrame(valores, columns=["X", "Y"])

# Mostrando a tabela
print('[Primeira Tabela]')
print('-----------------------------')
print(tabela.to_string()) 
print('-----------------------------')

"""
# Adicionando colunas a mais com os resultados de alguns operadores
"""

# Usando o operador & (que é um "E lógico") para criar uma nova coluna
tabela['(X E Y)'] = tabela['X'] & tabela['Y']

# Mostrando a tabela resultante
print('[Tabela do Operador E]')
print('-----------------------------')
print(tabela.to_string()) 
print('---------------------------')

# E agora usando o operador lógico do OU (|)
tabela['(X OU Y)'] = tabela['X'] | tabela['Y']

# Mostrando a tabela resultante
print('[Tabela dos Operadores E e OU]')
print('-------------------------------')
print(tabela.to_string()) 
print('-------------------------------')

"""# Interagindo com o usuário para criar uma tabela com as variáveis que o próprio usuário escolher

"""

# Importa uma biblioteca que ajuda a criar tabelas
import itertools
# Importa novamente pandas só para não dar erro se executar este pedaço diretamente
import pandas as pd  # Importando a biblioteca pandas


# Pedindo para o usuário a quantidade de variáveis
# A função int converte para inteiro a quantidade passada pelo usuário
qtd = int(input("Quantas variáveis você quer usar: " ))
print("Ok, irei criar uma tabela com "+str(qtd)+" variáveis")

# Pedindo para o usuário o nome de cada variável
vars=[]
for i in range(qtd):
    var=input("Qual o nome da variável "+str(i)+" ? ")
    vars.append(var)

# Mostrando todas as variáveis
print("Variáveis da Tabela: ",vars)    

# Criando a tabela com todas as combinações de valores para a quantidade
# de variáveis escolhida usando a biblioteca ITERTOOLS
# A função itertools.product cria o produto cartesiano entre N conjuntos
# que é justamente o que precisamos.
valores = list(itertools.product([False, True],repeat=len(vars)))
print("Valores das Variáveis: ",valores)

# Convertendo para uma DataFrame (estrutura de dados da biblioteca PANDAS)
tabela = pd.DataFrame(valores, columns=vars)

print('------------------------------------')
print("Tabela Gerada Automaticamente: ")
print('------------------------------------')
print(tabela.to_string()) 
print('------------------------------------')

"""# CALCULANDO O OPERADOR CONDICIONAL (SE ... ENTÃO)"""

# Para poder NEGAR todos os elementos de uma lista vou usar uma função
# da biblioteca operator. 
import operator

# Criando uma função que nega todos os elementos de uma lista
def NAO(lista):
  listaNegada=list(map(operator.not_, lista))
  return listaNegada

# Testando a função:
ListaAntes = [False, False, True, True, False]
print('Lista original: ',ListaAntes)
ListaDepois = NAO(ListaAntes)
print('Lista com cada elemento negado: ',ListaDepois)

# Criando uma coluna para o operador condicional usando a equivalência: 
# Se X então Y  =   Não X ou Y
# Estou pegando as duas primeiras variáveis da tabela
tabela['('+vars[0]+' -> '+vars[1]+')'] = NAO(tabela[vars[0]]) | tabela[vars[1]]

# Mostrando a tabela resultante
print('------------------------------------')
print('Tabela para "Se A Então B"')
print('------------------------------------')
print(tabela.to_string()) 
print('------------------------------------')